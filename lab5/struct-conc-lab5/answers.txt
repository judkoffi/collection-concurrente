Exo1:
1.
# JMH version: 1.23
# VM version: JDK 15-dev, OpenJDK 64-Bit Server VM, 15-dev+0-1ecbddb2f312
# VM invoker: /home/judi/libs/jdk-15-vector/bin/java
# VM options: <none>
# Warmup: 5 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fr.umlv.structconc.VectorizedBenchMark.sum_loop

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 487.157 us/op
# Warmup Iteration   2: 434.939 us/op
# Warmup Iteration   3: 447.617 us/op
# Warmup Iteration   4: 511.857 us/op
# Warmup Iteration   5: 530.691 us/op
Iteration   1: 442.870 us/op
Iteration   2: 437.640 us/op
Iteration   3: 451.039 us/op
Iteration   4: 586.253 us/op
Iteration   5: 512.652 us/op


Result "fr.umlv.structconc.VectorizedBenchMark.sum_loop":
  486.091 ±(99.9%) 244.919 us/op [Average]
  (min, avg, max) = (437.640, 486.091, 586.253), stdev = 63.605
  CI (99.9%): [241.172, 731.009] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     Mode  Cnt    Score     Error  Units
VectorizedBenchMark.sum_loop  avgt    5  486.091 ± 244.919  us/op


2.


4.
Dans la classe VectorizedBenchMark, dupliquer la méthode de benchmark pour benchmarker la méthode sumReduceLane.
Lancer le benchmark, est-ce que le résultat est satifaisant (la réponse est non), pourquoi ? 

Benchmark                            Mode  Cnt    Score    Error  Units
VectorizedBenchMark.sum_loop         avgt    5  417.855 ± 61.281  us/op
VectorizedBenchMark.sum_vector_loop  avgt    5  332.200 ± 23.853  us/op

Non, car c'est censer etre 8 fois plus rapique ce qui est pas le cas pour l'instant

5.


